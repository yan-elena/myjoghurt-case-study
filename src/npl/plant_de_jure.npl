scope plant_de_jure {

    // norm to fill a bottle until the ordered quantity is reached
    // order_status(unit_agent, liquid_type, order_quantity, current_number, min_level, max_level)
    norm n1: order_status(U, LQ, N, X, MN, MX) & X < N & .my_name(P)
        -> obligation(P, n1, fill_bottle(U, LQ, N, X + 1, MN, MX), level(X, L) & (L<MN | L>MX)) .

    // norm to update the factors once the bottle has been filled
    norm n2: completed_bottle(U, LQ, L, X) & .my_name(P)
        // unfulfilled if the image is below the threshold
        -> obligation(P, n2, update_factors(U, X, L), (L<MN | L>MX) & factors(U, X, _, _, I, _, _) & threshold(T, _) & I < T)
        if fulfilled: s0(U, LQ, L, X)
        if unfulfilled: s3(U, X), s4(U, X).

    //sanction s0: update the status for completing bottle
    sanction-rule s0(U, LQ, L, X) : .my_name(P)
        ->  sanction(P, fill_next_bottle(U, LQ, L, X)) .

    // sanction s3: reduce the unit agentâ€™s likelihood of being selected for subsequent filling orders
    sanction-rule s3(U, X) : factors(U, X, _, _, _, _, C) & threshold(_, T) & C < T & .my_name(P)
        ->  sanction(P, reduce_likelihood(U)) .

    // sanction s4: remove the unit agent completely as an option for subsequent filling orders
    sanction-rule s4(U, X): factors(U, X, _, _, _, _, C) & threshold(_, T) & C >= T & .my_name(P)
        -> sanction(P, remove_unit(U)) .
}